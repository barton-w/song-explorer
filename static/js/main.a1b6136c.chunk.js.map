{"version":3,"sources":["components/constants.js","components/songFeatures.js","components/song.js","components/songResults.js","components/search.js","serviceWorker.js","index.js","App.js"],"names":["base_url","SongFeatures","props","useState","loading","setLoading","songFeatures","setSongFeatures","useEffect","fetch","id","then","response","json","catch","error","console","log","className","describeKey","features","key","mode","describeTimeSignature","time_signature","describeTempo","tempo","describeDuration","duration_ms","describeValence","valence","describeEnergy","energy","describeDanceability","danceability","describeAcousticness","acousticness","describeInstrumentalness","instrumentalness","describeLiveness","liveness","describeSpeechiness","speechiness","describeLoudness","loudness","num","score","parseFloat","toFixed","seconds","minutes","Math","floor","remainingSeconds","round","responseMode","responseKey","Song","showSongFeatures","setShowSongFeatures","track","name","artistDisplayName","artist","href","urls","spotify","src","image","url","alt","lyrics_url","onClick","artistArray","displayName","i","length","SongResults","songResults","tracks","map","index","Search","formSong","setSong","setSongResults","searchType","setSearchType","endpoint","setEndpoint","onSubmit","event","preventDefault","type","value","onChange","target","placeholder","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1b6136c.chunk.js","sourcesContent":["//dev API\nconst base_url = \"http://localhost:3000\"\n\n//prod API\n//const base_url = \"\"\n\nexport {base_url}\n","import React, {useState, useEffect} from \"react\"\nimport {base_url} from \"./constants.js\"\n\nexport default function SongFeatures(props) {\n  const [loading, setLoading] = useState(true)\n  const [songFeatures, setSongFeatures] = useState({})\n  useEffect(() => {\n    fetch(base_url + \"/tracks/features?id=\" + props.id)\n    .then(response => response.json())\n    .then((json) => {\n      setSongFeatures(json)\n      setLoading(false)\n    })\n    .catch(error => console.log(error))\n  }, [props.id])\n  return (\n    <div className=\"song-features\">\n      <h5>SONG FEATURES</h5>\n      {\n        loading ?\n        <h2>LOADING</h2>\n        :\n        <div className=\"song-features-detail\">\n          <table className=\"striped\">\n            <thead>\n              <tr>\n                <th>Song Attributes</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Key Signature</td>\n                <td>{describeKey(songFeatures.features.key, songFeatures.features.mode)}</td>\n              </tr>\n              <tr>\n                <td>Time Signature</td>\n                <td>{describeTimeSignature(songFeatures.features.time_signature)}</td>\n              </tr>\n              <tr>\n                <td>Tempo</td>\n                <td>{describeTempo(songFeatures.features.tempo)}</td>\n              </tr>\n              <tr>\n                <td>Length</td>\n                <td>{describeDuration(songFeatures.features.duration_ms)}</td>\n              </tr>\n            </tbody>\n          </table>\n          <table className=\"striped\">\n            <thead>\n              <tr>\n                <th>Musical Features</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Positivity</td>\n                <td>{describeValence(songFeatures.features.valence)}</td>\n              </tr>\n              <tr>\n                <td>Energy</td>\n                <td>{describeEnergy(songFeatures.features.energy)}</td>\n              </tr>\n              <tr>\n                <td>Danceability</td>\n                <td>{describeDanceability(songFeatures.features.danceability)}</td>\n              </tr>\n              <tr>\n                <td>Acousticness</td>\n                <td>{describeAcousticness(songFeatures.features.acousticness)}</td>\n              </tr>\n              <tr>\n                <td>Instrumentalness</td>\n                <td>{describeInstrumentalness(songFeatures.features.instrumentalness)}</td>\n              </tr>\n              <tr>\n                <td>Liveness</td>\n                <td>{describeLiveness(songFeatures.features.liveness)}</td>\n              </tr>\n              <tr>\n                <td>Spoken-word</td>\n                <td>{describeSpeechiness(songFeatures.features.speechiness)}</td>\n              </tr>\n              <tr>\n                <td>Loudness</td>\n                <td>{describeLoudness(songFeatures.features.loudness)}</td>\n              </tr>\n            </tbody>\n          </table>\n          {/* <p>{describeAcousticness(songFeatures.features.acousticness)}</p> */}\n          {/* <p>{describeDanceability(songFeatures.features.danceability)}</p> */}\n          {/* <p>{describeDuration(songFeatures.features.duration_ms)}</p> */}\n          {/* <p>{describeEnergy(songFeatures.features.energy)}</p> */}\n          {/* <p>{describeInstrumentalness(songFeatures.features.instrumentalness)}</p> */}\n          {/* <p>{describeKey(songFeatures.features.key, songFeatures.features.mode)}</p> */}\n          {/* <p>{describeLiveness(songFeatures.features.liveness)}</p>\n          <p>{describeLoudness(songFeatures.features.loudness)}</p>\n          <p>{describeSpeechiness(songFeatures.features.speechiness)}</p> */}\n          {/* <p>{describeTempo(songFeatures.features.tempo)}</p> */}\n          {/* <p>{describeTimeSignature(songFeatures.features.time_signature)}</p> */}\n          {/* <p>{describeValence(songFeatures.features.valence)}</p> */}\n        </div>\n      }\n    </div>\n  )\n}\n\nconst describeAcousticness = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No acousticness score available :(\"\n  } else {\n    const score = parseFloat((num * 100).toFixed(1))\n    return `${score}% confidence the song is acoustic`\n  }\n}\n\nconst describeDanceability = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No danceability score avaiable :(\"\n  } else {\n    let response = \"\"\n    const score = parseFloat((num * 100).toFixed(1))\n    if (score < 25) {\n      response = `Not danceable: ${score}% on the danceability scale`\n    } else if (score >= 25 && score < 50) {\n      response = `Slightly dancy: ${score}% on the danceability scale`\n    } else if (score >= 50 && score < 75) {\n      response = `Moderately dancy: ${score}% on the danceability scale`\n    } else if (score >= 75) {\n      response = `Dancy af! ${score}% on the danceability scale`\n    } else {\n      response = \"No danceability score avaiable :(\"\n    }\n    return response\n  }\n}\n\nconst describeDuration = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No duration avaiable :(\"\n  } else {\n    const seconds = num / 1000\n    const minutes = Math.floor(seconds/60)\n    const remainingSeconds = Math.round(seconds - (minutes*60))\n    return `${minutes} minutes, ${remainingSeconds} seconds`\n  }\n}\n\nconst describeEnergy = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No energy score available :(\"\n  } else {\n    let response = \"\"\n    const score = parseFloat((num * 100).toFixed(1))\n    if (score < 25) {\n      response = `Chill af: ${score}% on the energy scale`\n    } else if (score >= 25 && score < 50) {\n      response = `Fairly mellow: ${score}% on the energy scale`\n    } else if (score >= 50 && score < 75) {\n      response = `Pretty energetic: ${score}% on the energy scale`\n    } else if (score >= 75) {\n      response = `In yo face! ${score}% on the energy scale`\n    } else {\n      response = \"No energy score avaiable :(\"\n    }\n    return response\n  }\n}\n\nconst describeInstrumentalness = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No instrumentalness score available :(\"\n  } else {\n    const score = parseFloat((num * 100).toFixed(1))\n    return `${score}% confidence the song is instrumental (no vocals)`\n  }\n}\n\nconst describeKey = (key, mode) => {\n  let responseMode = \"\"\n  let responseKey = \"\"\n  if (typeof mode === \"undefined\" || mode === null) {\n    responseMode = \"\"\n  } else {\n    if (mode === 1) {\n      responseMode = \"Major\"\n    } else {\n      responseMode = \"minor\"\n    }\n  }\n  if (typeof key === \"undefined\" || key === null) {\n    responseKey = \"\"\n  } else {\n    switch (key) {\n      case 0:\n        responseKey = \"C\"\n        break;\n      case 1:\n        responseKey = \"C# (or D♭)\"\n        break;\n      case 2:\n        responseKey = \"D\"\n        break;\n      case 3:\n        responseKey = \"D# (or E♭)\"\n        break;\n      case 4:\n        responseKey = \"E\"\n        break;\n      case 5:\n        responseKey = \"F\"\n        break;\n      case 6:\n        responseKey = \"F# (or G♭)\"\n        break;\n      case 7:\n        responseKey = \"G\"\n        break;\n      case 8:\n        responseKey = \"G# (or A♭)\"\n        break;\n      case 9:\n        responseKey = \"A\"\n        break;\n      case 10:\n        responseKey = \"A# (or B♭)\"\n        break;\n      case 11:\n        responseKey = \"B\"\n        break;\n      default:\n        responseKey = \"\"\n    }\n  }\n  if (responseMode === \"\" && responseKey === \"\") {\n    return \"No key data available :(\"\n  } else {\n    return `${responseKey} ${responseMode}`\n  }\n}\n\nconst describeLiveness = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No liveness score available :(\"\n  } else {\n    const score = parseFloat((num * 100).toFixed(1))\n    return `${score}% confidence the song is performed live`\n  }\n}\n\nconst describeLoudness = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No loudness data available :(\"\n  } else {\n    let response = \"\"\n    const score = parseFloat((num).toFixed(1))\n    if (score < -30) {\n      response = `A hushed whisper, averaging ${score}db`\n    } else if (score >= -30 && score < -20) {\n      response = `Fairly quiet, averaging ${score}db`\n    } else if (score >= -20 && score < -10) {\n      response = `Moderately loud, averaging ${score}db`\n    } else if (score >= -10) {\n      response = `Hot track! averaging ${score}db`\n    } else {\n      response = \"No loudness score avaiable :(\"\n    }\n    return response\n  }\n}\n\nconst describeSpeechiness = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No spoken-word score available :(\"\n  } else {\n    let response = \"\"\n    const score = parseFloat((num * 100).toFixed(1))\n    if (score < 33.3) {\n      response = `${score}% spoken-word score - likely little to no spoken words`\n    } else if (score >= 33.3 && score < 66.6) {\n      response = `${score}% spoken-word score - a mix of music and spoken words`\n    } else if (score >= 66.6) {\n      response = `${score}% spoken-word score - mostly spoken words`\n    } else {\n      response = \"No spoken-word score avaiable :(\"\n    }\n    return response\n  }\n}\n\nconst describeTempo = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No tempo available :(\"\n  } else {\n    const score = parseFloat(num.toFixed(1))\n    return `${score} bpm`\n  }\n}\n\nconst describeTimeSignature = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No time signature available :(\"\n  } else {\n    return `${num}`\n  }\n}\n\nconst describeValence = (num) => {\n  if (typeof num === \"undefined\" || num === null) {\n    return \"No positivity score avaiable :(\"\n  } else {\n    let response = \"\"\n    const score = parseFloat((num * 100).toFixed(1))\n    if (score < 25) {\n      response = `Dark: ${score}% on the positivity scale`\n    } else if (score >= 25 && score < 50) {\n      response = `Moody: ${score}% on the positivity scale`\n    } else if (score >= 50 && score < 75) {\n      response = `Pretty upbeat: ${score}% on the positivity scale`\n    } else if (score >= 75) {\n      response = `Happy! ${score}% on the positivity scale`\n    } else {\n      response = \"No positivity score avaiable :(\"\n    }\n    return response\n  }\n}\n","import React, {useState, useEffect} from \"react\"\nimport SongFeatures from \"./songFeatures.js\"\n\nexport default function Song(props) {\n  const [showSongFeatures, setShowSongFeatures] = useState(false)\n  useEffect(() => {\n    setShowSongFeatures(false)\n  }, [props.track])\n  return (\n    <div className=\"song\">\n      <h3>{props.track.name}</h3>\n      <h4>{artistDisplayName(props.track.artist)}</h4>\n      <a href={props.track.urls.spotify}>Listen on Spotify</a>\n      <img src={props.track.image.url} alt={props.track.name}/>\n      {\n        typeof props.track.lyrics_url !== \"undefined\" ?\n        <a href={props.track.lyrics_url}>See the Lyrics</a>\n        : null\n      }\n      <button\n        onClick={() => {\n          setShowSongFeatures(!showSongFeatures)\n        }}\n        >Song Features</button>\n      {\n        showSongFeatures ?\n        <SongFeatures\n          id={props.track.id}\n        />\n        : null\n      }\n    </div>\n  )\n}\n\n//Function to handle multiple artists on a track\nconst artistDisplayName = (artistArray) => {\n  let displayName = \"\"\n  for (let i=0; i < artistArray.length; i++) {\n    if (i === artistArray.length - 1) {\n      displayName += artistArray[i].name\n    } else {\n      displayName += artistArray[i].name + \" & \"\n    }\n  }\n  return displayName\n}\n","import React from \"react\"\nimport Song from \"./song.js\"\n\nexport default function SongResults(props) {\n  return (\n    <div className=\"song-results\">\n      <h1>RESULTS</h1>\n      {\n        props.songResults.tracks.map((track, index) => {\n          return (\n            <Song\n              key={index}\n              track={track}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n","import React, {useState} from \"react\"\nimport SongResults from \"./songResults.js\"\nimport {base_url} from \"./constants.js\"\n\nexport default function Search() {\n  const [formSong, setSong] = useState(\"\")\n  const [songResults, setSongResults] = useState({})\n  const [searchType, setSearchType] = useState(\"song\")\n  const [endpoint, setEndpoint] = useState(\"/tracks/search?track=\")\n  const handleChange = (event) => {\n    setSong(event.target.value)\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    fetch(base_url + endpoint + formSong)\n    .then(response => response.json())\n    .then(json => setSongResults(json))\n    .catch(error => console.log(error))\n  }\n  return (\n    <div className=\"search\">\n      <button\n        id={\n          searchType === \"song\" ?\n          \"active\" : \"inactive\"\n        }\n        className=\"waves-effect waves-light btn-large song-search-button\"\n        onClick={() => {\n          setSearchType(\"song\")\n          setEndpoint(\"/tracks/search?track=\")\n        }}\n        >Song</button>\n      <button\n        id={\n          searchType === \"lyrics\" ?\n          \"active\" : \"inactive\"\n        }\n        className=\"waves-effect waves-light btn-large lyrics-search-button\"\n        onClick={() => {\n          setSearchType(\"lyrics\")\n          setEndpoint(\"/tracks/lyrics?lyrics=\")\n        }}\n        >Lyrics</button>\n      <form id=\"search-form\" className=\"col s12\" onSubmit={handleSubmit}>\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <input\n              id=\"song\"\n              type=\"text\"\n              value={formSong}\n              onChange={handleChange}\n              placeholder={\n                searchType === \"song\" ?\n                \"Song Title\"\n                : \"Lyrics from a song\"\n              }\n            />\n          </div>\n        </div>\n        <input\n          id=\"search-button\"\n          className=\"waves-effect waves-light btn-large\"\n          type=\"submit\"\n          value=\"Search\"/>\n      </form>\n      {\n        typeof songResults.tracks !== \"undefined\" && songResults.tracks.length > 0 ?\n        <SongResults\n          songResults={songResults}\n        />\n        :\n        <div className=\"response-message\">\n          {\n            typeof songResults.message !== \"undefined\" ?\n            <p>{songResults.message}</p>\n            : null\n          }\n        </div>\n      }\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useEffect} from \"react\"\nimport Search from \"./components/search.js\"\nimport {base_url} from \"./components/constants.js\"\nimport \"./css/materialize.css\"\nimport \"./css/main.css\"\n\nexport default function App() {\n  //GET call on render to wake up the API on heroku, in case it's unloaded from their servers\n  useEffect(() => {\n    fetch(base_url + \"/wakes\")\n    .then(response => response.json())\n    .then(json => console.log(json.response))\n    .catch(error => console.log(error))\n  }, [])\n  return (\n    <div className=\"container main\">\n      <div className=\"powered\">\n        <p id=\"powered-by\">Powered by</p>\n        <div id=\"spotify-logo\"></div>\n        <div id=\"genius-logo\"></div>\n      </div>\n      <h1>Song Explorer</h1>\n      <h6>Search by song or lyrics and discover song-data like key, tempo, danceability, energy, and more</h6>\n      <Search />\n    </div>\n  );\n}\n"],"sourceRoot":""}